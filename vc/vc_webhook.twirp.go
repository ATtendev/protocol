// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: vc_webhook.proto

package vc

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ========================
// WebHookService Interface
// ========================

type WebHookService interface {
	WebHook(context.Context, *WebhookEvent) (*Empty, error)
}

// ==============================
// WebHookService Protobuf Client
// ==============================

type webHookServiceProtobufClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewWebHookServiceProtobufClient creates a Protobuf client that implements the WebHookService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewWebHookServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) WebHookService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "vc", "WebHookService")
	urls := [1]string{
		serviceURL + "WebHook",
	}

	return &webHookServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *webHookServiceProtobufClient) WebHook(ctx context.Context, in *WebhookEvent) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "vc")
	ctx = ctxsetters.WithServiceName(ctx, "WebHookService")
	ctx = ctxsetters.WithMethodName(ctx, "WebHook")
	caller := c.callWebHook
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *WebhookEvent) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*WebhookEvent)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*WebhookEvent) when calling interceptor")
					}
					return c.callWebHook(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *webHookServiceProtobufClient) callWebHook(ctx context.Context, in *WebhookEvent) (*Empty, error) {
	out := new(Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==========================
// WebHookService JSON Client
// ==========================

type webHookServiceJSONClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewWebHookServiceJSONClient creates a JSON client that implements the WebHookService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewWebHookServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) WebHookService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "vc", "WebHookService")
	urls := [1]string{
		serviceURL + "WebHook",
	}

	return &webHookServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *webHookServiceJSONClient) WebHook(ctx context.Context, in *WebhookEvent) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "vc")
	ctx = ctxsetters.WithServiceName(ctx, "WebHookService")
	ctx = ctxsetters.WithMethodName(ctx, "WebHook")
	caller := c.callWebHook
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *WebhookEvent) (*Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*WebhookEvent)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*WebhookEvent) when calling interceptor")
					}
					return c.callWebHook(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *webHookServiceJSONClient) callWebHook(ctx context.Context, in *WebhookEvent) (*Empty, error) {
	out := new(Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =============================
// WebHookService Server Handler
// =============================

type webHookServiceServer struct {
	WebHookService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewWebHookServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewWebHookServiceServer(svc WebHookService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &webHookServiceServer{
		WebHookService:   svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *webHookServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *webHookServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// WebHookServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const WebHookServicePathPrefix = "/twirp/vc.WebHookService/"

func (s *webHookServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "vc")
	ctx = ctxsetters.WithServiceName(ctx, "WebHookService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "vc.WebHookService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "WebHook":
		s.serveWebHook(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *webHookServiceServer) serveWebHook(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveWebHookJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveWebHookProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *webHookServiceServer) serveWebHookJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "WebHook")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(WebhookEvent)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.WebHookService.WebHook
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *WebhookEvent) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*WebhookEvent)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*WebhookEvent) when calling interceptor")
					}
					return s.WebHookService.WebHook(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling WebHook. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *webHookServiceServer) serveWebHookProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "WebHook")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(WebhookEvent)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.WebHookService.WebHook
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *WebhookEvent) (*Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*WebhookEvent)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*WebhookEvent) when calling interceptor")
					}
					return s.WebHookService.WebHook(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling WebHook. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *webHookServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor4, 0
}

func (s *webHookServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *webHookServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "vc", "WebHookService")
}

var twirpFileDescriptor4 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x51, 0x8b, 0xda, 0x40,
	0x10, 0xc7, 0x49, 0xae, 0x39, 0xcd, 0xe4, 0xea, 0x1d, 0xdb, 0x3e, 0x2c, 0x47, 0x8b, 0xc1, 0x42,
	0xc9, 0x53, 0x02, 0x96, 0x82, 0xf8, 0x66, 0xa9, 0x50, 0xdf, 0x24, 0x15, 0x85, 0xbe, 0x84, 0x64,
	0xb3, 0xea, 0xa2, 0xd9, 0x09, 0xeb, 0xba, 0xa5, 0x5f, 0xa9, 0x5f, 0xa7, 0xdf, 0xa2, 0x9f, 0xa2,
	0xec, 0xc6, 0x9e, 0xbe, 0xcd, 0xfc, 0xf2, 0xff, 0x85, 0x99, 0x1d, 0x78, 0x32, 0xac, 0xf8, 0xc9,
	0xab, 0x3d, 0xe2, 0x21, 0x6d, 0x15, 0x6a, 0x24, 0xbe, 0x61, 0xcf, 0x8f, 0x86, 0x15, 0x0d, 0xd6,
	0xfc, 0x78, 0xea, 0xa0, 0x03, 0x7c, 0xa7, 0xf8, 0xe9, 0x3f, 0xb0, 0x9e, 0x90, 0x37, 0x64, 0xd4,
	0x83, 0x60, 0xde, 0xb4, 0xfa, 0xd7, 0xe8, 0x8f, 0x0f, 0x0f, 0x9b, 0xee, 0x97, 0x73, 0xc3, 0xa5,
	0x26, 0x6f, 0x21, 0xe0, 0xb6, 0xa0, 0x5e, 0xec, 0x25, 0x61, 0xde, 0x35, 0xe4, 0x1d, 0xbc, 0x52,
	0x88, 0x0d, 0xf5, 0x63, 0x2f, 0x89, 0xc6, 0xfd, 0xd4, 0xb0, 0x34, 0x47, 0x6c, 0x72, 0x47, 0xc9,
	0x67, 0x88, 0xda, 0x52, 0x69, 0xc1, 0x44, 0x5b, 0x4a, 0x4d, 0xef, 0x5c, 0xe8, 0x8d, 0x0d, 0x2d,
	0xaf, 0x78, 0x21, 0xb7, 0x98, 0xdf, 0xe6, 0x48, 0x06, 0x51, 0x37, 0x66, 0x21, 0xe4, 0x16, 0x69,
	0xe8, 0xb4, 0x81, 0xd5, 0xe6, 0x0e, 0x3b, 0x03, 0xf8, 0x4b, 0x4d, 0xc6, 0xf0, 0x70, 0x59, 0xa3,
	0x33, 0xc0, 0x19, 0x8f, 0xd6, 0x58, 0xc8, 0xab, 0x12, 0x89, 0x6b, 0x43, 0x3e, 0x40, 0xa0, 0x55,
	0xc9, 0x0e, 0xb4, 0xef, 0xc2, 0xaf, 0x6d, 0x78, 0x65, 0x81, 0x8b, 0x76, 0xdf, 0xc8, 0x00, 0x7c,
	0x51, 0xd3, 0x7b, 0xb7, 0xb1, 0x2f, 0x6a, 0xf2, 0x1e, 0x80, 0x29, 0x5e, 0x6a, 0x5e, 0x17, 0xa5,
	0xa6, 0xbd, 0xd8, 0x4b, 0xee, 0xf2, 0xf0, 0x42, 0x66, 0x9a, 0x0c, 0x21, 0x92, 0xe7, 0xa6, 0xa8,
	0x15, 0xb6, 0x2d, 0xaf, 0x69, 0x14, 0x7b, 0x49, 0x90, 0x83, 0x3c, 0x37, 0x5f, 0x3b, 0x32, 0x9e,
	0xc0, 0x60, 0xc3, 0xab, 0x6f, 0x88, 0x87, 0xef, 0x5c, 0x19, 0xc1, 0x38, 0xf9, 0x08, 0xbd, 0x0b,
	0x21, 0x4f, 0x76, 0x84, 0xdb, 0x37, 0x7f, 0x0e, 0xdd, 0xce, 0xf6, 0x1e, 0x5f, 0x26, 0x3f, 0x86,
	0x3b, 0xa1, 0xf7, 0xe7, 0x2a, 0x65, 0xd8, 0x64, 0xb3, 0x95, 0xe6, 0xb2, 0xe6, 0x26, 0x73, 0x57,
	0x63, 0x78, 0xcc, 0x0c, 0xfb, 0xed, 0xf7, 0xd7, 0x2c, 0x5d, 0x5a, 0xf0, 0xd7, 0x0f, 0xd7, 0x6c,
	0x3a, 0x75, 0x75, 0x75, 0xef, 0x32, 0x9f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x38, 0x89,
	0xb6, 0x25, 0x02, 0x00, 0x00,
}
